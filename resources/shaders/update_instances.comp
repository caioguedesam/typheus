#version 460

struct PerInstanceData
{
    mat4 world;
    vec4 color;
};

layout (std140, set = 0, binding = 0) buffer InstanceDataBlock
{
    PerInstanceData data[];
} u_instances;

layout (push_constant) uniform PushConstantBlock
{
    mat4 rotation;
    float deltaTime;
} u_constants;

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
    uint id = gl_GlobalInvocationID.x;

    vec3 instanceColor = u_instances.data[id].color.rgb;
    instanceColor = rgb2hsv(instanceColor);
    instanceColor.r += 1 * u_constants.deltaTime;
    instanceColor.r = mod(instanceColor.r + 1.0, 1.0);
    instanceColor = hsv2rgb(instanceColor);
    u_instances.data[id].color = vec4(instanceColor, 1);
    u_instances.data[id].world = u_instances.data[id].world * u_constants.rotation;
}
